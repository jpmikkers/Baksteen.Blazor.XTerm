@inject IJSRuntime jsRuntime
@implements IAsyncDisposable

<link href="_content/BaksteenXTerm/css/xterm.css" rel="stylesheet" />
<div @ref="_terminalElementReference" id="@_resolvedId"></div>

@code {

    [Parameter] public string? Id { get; set; }
    private string _resolvedId = string.Empty;

    protected override void OnInitialized()
    {
        _resolvedId = Id ?? $"xterm-{Guid.NewGuid()}";
    }

    private DotNetObjectReference<XTerm>? _dotNetRef;
    private ElementReference _terminalElementReference;

    private IJSObjectReference? module;
    private IJSObjectReference? terminal;
    private IJSObjectReference? xtermInteropHelper;

    public class KeyEventPayload
    {
        public string Key { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
        public bool Ctrl { get; set; }
        public bool Alt { get; set; }
        public bool Shift { get; set; }
        public bool Meta { get; set; }
    }

    [JSInvokable]
    public async Task OnTerminalData(string data)
    {
        if(terminal is not null)
        {
            await Write($"got data {data}");
        }
    }

    [JSInvokable]
    public async Task OnTerminalKey(KeyEventPayload e)
    {
        if(terminal is not null)
        {
            await Write($"got key {e}");
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);

            /*
            Change the {PATH} placeholder in the next line to the path of
            the collocated JS file in the app. Examples:

                ./Components/Pages/JsCollocation2.razor.js (.NET 8 or later)
                ./Pages/JsCollocation2.razor.js (.NET 7 or earlier)
            */
        //module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./{PATH}/JsCollocation2.razor.js");
        module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BaksteenXTerm/XTerm.razor.js");
            //terminal = await module.InvokeAsync<IJSObjectReference>("initTerminal", _terminalElementReference, _dotNetRef );
            xtermInteropHelper = await module.InvokeAsync<IJSObjectReference>("createXTermInteropHelper", _terminalElementReference);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if(xtermInteropHelper is not null)
        {
            try
            {
                await xtermInteropHelper.InvokeVoidAsync("dispose");
                await xtermInteropHelper.DisposeAsync();
            }
            catch(JSDisconnectedException)
            {
            }
            xtermInteropHelper = null;
        }

        if(terminal is not null)
        {
            try
            {
                await terminal.DisposeAsync();
            }
            catch(JSDisconnectedException)
            {
            }
            terminal = null;
        }

        if(module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch(JSDisconnectedException)
            {
            }
            module = null;
        }
    }

    public async Task Fit()
    {
        if(xtermInteropHelper is null) return;
        await xtermInteropHelper.InvokeVoidAsync("fit");
    }

    public async Task Write(string text)
    {
        if(xtermInteropHelper is null) return;
        await xtermInteropHelper.InvokeVoidAsync("write", text);
    }

    public async Task Clear()
    {
        if(xtermInteropHelper is null) return;
        // Call the xterm.js Terminal.clear() method via JS interop.
        // If your xterm.js version does not expose `clear`, you can
        // alternatively use `reset` or write an ANSI clear sequence.
        await xtermInteropHelper.InvokeVoidAsync("clear");
    }

    public async Task Reset()
    {
        if(xtermInteropHelper is null) return;
        // Try calling the JS `reset` method on the Terminal instance.
        await xtermInteropHelper.InvokeVoidAsync("reset");
    }

    public async Task Blur()
    {
        if(xtermInteropHelper is null) return;
        await xtermInteropHelper.InvokeVoidAsync("blur");
    }

    public async Task Focus()
    {
        if(xtermInteropHelper is null) return;
        await xtermInteropHelper.InvokeVoidAsync("focus");
    }
}
