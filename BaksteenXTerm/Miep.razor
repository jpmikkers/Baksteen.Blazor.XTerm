@inject IJSRuntime jsRuntime
@implements IAsyncDisposable

<link href="_content/BaksteenXTerm/css/xterm.css" rel="stylesheet" />
<div id="terminal"></div>

@code {
    private IJSObjectReference? module;
    private IJSObjectReference? terminal;
    private string? result;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            /*
                Change the {PATH} placeholder in the next line to the path of
                the collocated JS file in the app. Examples:

                ./Components/Pages/JsCollocation2.razor.js (.NET 8 or later)
                ./Pages/JsCollocation2.razor.js (.NET 7 or earlier)
            */
            //module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./{PATH}/JsCollocation2.razor.js");
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BaksteenXTerm/Miep.razor.js");
            terminal = await module.InvokeAsync<IJSObjectReference>("initTerminal");
        }
    }

    // public async Task ShowPrompt()
    // {
    //     if(module is not null)
    //     {
    //         result = await module.InvokeAsync<string>(
    //             "showPrompt2", "What's your name?");
    //         StateHasChanged();
    //     }
    // }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if(module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch(JSDisconnectedException)
            {
            }
        }
    }

    public async Task Write(string text)
    {
        if(terminal is not null)
        {
            await terminal.InvokeVoidAsync("write", text);
        }
    }

    public async Task Clear()
    {
        if (terminal is not null)
        {
            // Call the xterm.js Terminal.clear() method via JS interop.
            // If your xterm.js version does not expose `clear`, you can
            // alternatively use `reset` or write an ANSI clear sequence.
            await terminal.InvokeVoidAsync("clear");
        }
    }

    public async Task Reset()
    {
        if (terminal is not null)
        {
            // Try calling the JS `reset` method on the Terminal instance.
            await terminal.InvokeVoidAsync("reset");
        }
    }
}
